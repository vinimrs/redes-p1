#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
import Mensagens_Protocolo as SF
import scripts.Message_Handler as MH
# from scripts.Message_Handler import Message_Handler


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    
    mensagens = []
    #if not dados.endswith(b'\r\n'):
        # Dividir os dados em substrings e filtrar strings vazias
        #dados = list(filter(bool, dados.split(b'\r\n')))
    global _dados_residuais
    lines = _dados_residuais + dados
    mensagens = lines.split(b'\r\n')
    
    # Armazenar os dados residuais para uso posterior
    if(mensagens[-1][:len(_dados_residuais)] == _dados_residuais):
        _dados_residuais = b''
    _dados_residuais += mensagens.pop(-1)

    # Dividir os dados restantes em mensagens individuais e filtrar strings vazias
    #mensagens = list(filter(bool, dados.split(b'\r\n')))

    # Processar cada mensagem separadamente
    for mensagem in mensagens:
        print(conexao, mensagem)
        alvo, resposta = MH.Message_Handler(conexao, mensagem)
        print(alvo, resposta)
        if mensagem != b'':
            alvo.enviar(resposta)

    #print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)



servidor = Servidor(6667)
_nick_dict = {}
_dados_residuais = b''
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
